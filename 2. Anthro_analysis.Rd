

# Anthropogenic and lightning-started fires are becoming larger and more frequent over a longer season length in the U.S.
# Global Ecology and Biogeography
# Code author: Megan Cattau
# Contact info: megan.cattau@gmail.com or megancattau@boisestate.edu
# Manuscript authors: Megan Cattau, Carol Wessman, Adam Mahood, Jennifer Balch
# Project description: This project aims to elucidate how fire physical characteristics are changing over time in the US, the influence of anthropogenic ignitions on fire physical characteristics, and how these patterns vary over space and time.


### Figure - designates figure in manuscript
### Table - designates table in manuscript

# Code associated w this project:
# 1. Anthro_sample_data.Rd = sampled US fire characteristics on common grid

# Data associated w this project:
# Data/samples_df generated by code above

#######################################################################################################################
setwd("/Users/megancattau 1/Dropbox/0_EarthLab/US_Pyromes")
setwd("anthro_ign_code/")

# Projection for layers
#EPSG:32613
data_crs<- " +proj=utm +zone=13 +datum=WGS84 +units=m +no_defs +ellps=WGS84 "

library(sf)
library(raster)
library(rgdal)
library(tidyr)
library(plyr)
library(dplyr)
library(ggplot2)
library(segmented)
library(ggthemes)
library(ggmap)
library(RColorBrewer)
library(ggpubr)

########################################################################
##################### TABLE OF CONTENTS #########################
########################################################################
# 0. Import data and sample ecoregion (level 1)
# 1. Characterizing ignitions
# 2. Temporal trends
# 3. Characterizing fire~ign
# 4. Characterizing fire~ign/time
# 5. Characterizing fire~ign_ecoregion
# 6. Characterizing fire~ign_ecoregion/time
# 7. Segmentation - Relationship between anthropogenic ignitions and fire physical characteristics
# 8. Human fires are smaller and less intense... because of season length and freq?



########################################################################
######################### 0. Import data  and plot it ############################
########################################################################

# Import data

# Fire variables sampled at 50km resolution - created with code "1. Anthro_sample_data", also in Github repo
samples_df<-read.csv("samples_df.csv")
names(samples_df)
samples_df<-samples_df[,-1]	

samples_spatial<-samples_df
coordinates(samples_spatial)<-~x+y
proj4string(samples_spatial)<-CRS("+init=epsg:32613")

## Import overlay - EPA Level 1 Ecoregions clipped to States, in Github repo
Ecoregion <- st_read(dsn = 'Ecoregion_state', layer = "Eco_L1_pclp", quiet = TRUE) %>%
filter(!(NAME %in% c("Alaska", "Hawaii", "Puerto Rico"))) %>%
st_transform(., data_crs)
Ecoregion2<-as(Ecoregion, 'Spatial')
    
overlay <- fortify(Ecoregion2, region="NA_L1NAME")

# all the mean values plus FID and ecoregion
samples_df_mean<-samples_df[,c(1:15, 376, 379)]
samples_spatial_mean<-samples_spatial[,c(1:15, 376, 377)]


# Names to pass later to functions
names_vector<-c("Fire frequency (MODIS)", "Fire frequency  (MTBS)", "Fire frequency  (FPA FOD)", "Mean Intensity (MODIS)", "Maximum Intensity (MODIS)", "Mean Fire Size (MTBS)", "Max Fire Size (MTBS)",  "Mean Fire Size (FPA FOD)", "Max Fire Size (FPA FOD)",  "Burned Area (MTBS)",  "Burned Area (FPA FOD)", "Season Length (MTBS)",  "Season Length (MODIS)",  "Season Length (FPA FOD)", "Prop human ign (FPA FOD)")

names_simple<-c("Fire Frequency (n fires)", "Fire Frequency (n fires)", "Fire Frequency (n fires)", "Average Intensity (MW)", "Extreme Intensity(MW)", "Average Fire Size (ha)", "Extreme Fire Size (ha)", "Average Fire Size (ha)", "Extreme Fire Size (ha)", "Burned area (ha)", "Burned area (ha)", "Season Length (days)","Season Length (days)", "Season Length (days)", "Human Ignitions (Proportion)")

names_no_units<-c("Fire Frequency", "Fire Frequency", "Fire Frequency", "Average Intensity", "Extreme Intensity", "Average Fire Size", "Extreme Fire Size", "Average Fire Size", "Extreme Fire Size", "Burned area", "Burned area", "Season Length","Season Length", "Season Length", "Human Ignitions")

units_simple<-c("n fires", "n fires", "n fires", "MW", "MW", "ha", "ha", "ha","ha", "ha", "ha", "days","days", "days", "prop")



plot_char <- function (var){
	ggplot(as.data.frame(samples_spatial_mean), aes(x=x, y=y, colour=samples_spatial_mean@data[,var]))+
		coord_equal() +
	geom_point(size=1)+
	scale_color_gradient(low="white", high="darkred")+
	ggtitle(paste0(letters[var], ". ", names_vector[var])) +
	theme(plot.title = element_text(hjust = 0.5))+
	labs(colour=units_simple[var])+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
	axis.ticks=element_blank(),	
	axis.line=element_blank(),
	axis.text.x=element_blank(),
  axis.text.y=element_blank(),
  axis.title.x=element_blank(),
  axis.title.y=element_blank(),
	panel.background = element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}


### Figure S1
ggarrange(plot_char(1), plot_char(2),  plot_char(3),  
plot_char(4),  plot_char(5),  plot_char(6),  
plot_char(7),  plot_char(8),  plot_char(9),   
ncol=3, nrow=3, legend=c("right"))
ggarrange(plot_char(10), plot_char(11),  plot_char(12),  
plot_char(13),  plot_char(14),  plot_char(15),   
ncol=3, nrow=2, legend=c("right"))


## Demonstrate that variables not redundant

# Number of fires - MODIS, Short, MTBS
num_fires_long<-gather(samples_df[,c(1:3, 376)], key=variable, value=value, -FID)
num_fires_long$group<-ifelse(substr(num_fires_long$variable, 14, 18)=="MODIS", "MODIS", ifelse(substr(num_fires_long$variable, 14, 17)=="MTBS", "MTBS", ifelse(substr(num_fires_long$variable, 14, 18)=="Short", "FPA-FOD",-9999)))
num_fires_long$group<-as.factor(num_fires_long$group)

kruskal.test(value ~ group, data = num_fires_long)
# P < 0.001
# Pairwise comparisons using Wilcoxon rank sum test 
pairwise.wilcox.test(num_fires_long$value, 
                         num_fires_long$group, 
                          p.adjust.method="none")
# All p < 0.001

# Max Mean and Sum area - MTBS and Short
## Mean Area
mean_area_long<-gather(samples_df[,c(6, 8, 376)], key=variable, value=value, -FID)
mean_area_long$group<-ifelse(substr(mean_area_long$variable, 11, 14)=="MTBS", "MTBS", ifelse(substr(mean_area_long$variable, 11, 15)=="Short", "FPA-FOD",-9999))
mean_area_long$group<-as.factor(mean_area_long$group)
unique(mean_area_long$group)
wilcox.test(mean_area_long$value~mean_area_long$group)
# P < 0.001

## Max Area
max_area_long<-gather(samples_df[,c(7, 9, 376)], key=variable, value=value, -FID)
max_area_long$group<-ifelse(substr(max_area_long$variable, 10, 13)=="MTBS", "MTBS", ifelse(substr(max_area_long$variable, 10, 14)=="Short", "FPA-FOD",-9999))
max_area_long$group<-as.factor(max_area_long$group)
unique(max_area_long$group)
wilcox.test(max_area_long$value~max_area_long$group)
# P < 0.001

## Sum Area
sum_area_long<-gather(samples_df[,c(10, 11, 376)], key=variable, value=value, -FID)
sum_area_long$group<-ifelse(substr(sum_area_long$variable, 10, 13)=="MTBS", "MTBS", ifelse(substr(sum_area_long$variable, 10, 14)=="Short", "FPA-FOD",-9999))
sum_area_long$group<-as.factor(sum_area_long$group)
unique(sum_area_long$group)
wilcox.test(sum_area_long$value~sum_area_long$group)
# P < 0.001
	
# Seasonality - MTBS, MODIS, and Short
season_long<-gather(samples_df[,c(12, 13, 14, 376)], key=variable, value=value, -FID)
season_long$group<-ifelse(substr(season_long$variable, 8, 12)=="MODIS", "MODIS", ifelse(substr(season_long$variable, 8, 11)=="MTBS", "MTBS", ifelse(substr(season_long$variable, 8, 12)=="Short", "FPA-FOD",-9999)))
season_long$group<-as.factor(season_long$group)
unique(season_long$group)
kruskal.test(value ~ group, data = season_long)
# P < 0.001
# Pairwise comparisons using Wilcoxon rank sum test 
pairwise.wilcox.test(season_long$value, 
                         season_long$group, 
                          p.adjust.method="none")
# All # P < 0.001

# Max and mean  FRP = only one source - MODIS
# % Anthro = only one source - Short
	


########################################################################
######################### 1. Characterizing ignitions  ############################
########################################################################


# Characteristics for human vs Lightning areas
# Dominated by either human or lighting ignitions when one cause accounts for more than 75% of the number of fires in a given 50 × 50-km grid cell. 
samples_df$anthro<-ifelse(samples_df$Perc_human_Short_mean>=0.75, 1, 
ifelse(samples_df$Perc_human_Short_mean<=0.25, 2, 0))

samples_df$ign<-ifelse(samples_df$anthro==1, "Human", ifelse(samples_df$anthro==2, "Lightning", -9999))
	
	
########################################################################
########################## 2. Temporal trends ##############################
########################################################################

# grab FID, x, y, ecoregion, and ign
samples_df_annual<-samples_df[,c(16:375, 376:379, 381)]

samples_df_long<-gather(samples_df_annual, key=variable, value=value, -FID, -ign, -x, -y, -ecoregion)

# add year column
extractYear <- function(x, n){
  substr(x, nchar(x)-n+1, nchar(x))
}
samples_df_long$year1<-extractYear(samples_df_long$variable, 4)
samples_df_long$year<-as.numeric(samples_df_long$year1)
unique(samples_df_long$variable)
unique(samples_df_long$year)

samples_df_long$ecoregion<-as.factor(samples_df_long$ecoregion)
samples_df_long$ign<-as.factor(samples_df_long$ign)

# group each fire variables together

MODIS_numfires<-samples_df_long[grep("MODIS_Numfires_", samples_df_long$variable),]
MODIS_numfires$time<-MODIS_numfires$year - min(MODIS_numfires$year)

MTBS_numfires<-samples_df_long[grep("MTBS_Numfires_", samples_df_long$variable),]
MTBS_numfires$time<-MTBS_numfires$year - min(MTBS_numfires$year)

Short_numfires<-samples_df_long[grep("Short_Numfires_", samples_df_long$variable),]
Short_numfires$time<-Short_numfires$year - min(Short_numfires$year)

MODIS_meanFRP<-samples_df_long[grep("MODIS_meanFRP_", samples_df_long$variable),]
MODIS_meanFRP$time<-MODIS_meanFRP$year - min(MODIS_meanFRP$year)

MODIS_maxFRP<-samples_df_long[grep("MODIS_maxFRP_", samples_df_long$variable),]
MODIS_maxFRP$time<-MODIS_maxFRP$year - min(MODIS_maxFRP$year)

MTBS_meanArea<-samples_df_long[grep("MTBS_meanArea_", samples_df_long$variable),]
MTBS_meanArea$time<-MTBS_meanArea$year - min(MTBS_meanArea$year)

MTBS_maxArea<-samples_df_long[grep("MTBS_maxArea_", samples_df_long$variable),]
MTBS_maxArea$time<-MTBS_maxArea$year - min(MTBS_maxArea$year)

Short_meanArea<-samples_df_long[grep("Short_meanArea_", samples_df_long$variable),]
Short_meanArea$time<-Short_meanArea$year - min(Short_meanArea$year)

Short_maxArea<-samples_df_long[grep("Short_maxArea_", samples_df_long$variable),]
Short_maxArea$time<-Short_maxArea$year - min(Short_maxArea$year)

MTBS_sumArea<-samples_df_long[grep("MTBS_sumArea_", samples_df_long$variable),]
MTBS_sumArea$time<-MTBS_sumArea$year - min(MTBS_sumArea$year)

Short_sumArea<-samples_df_long[grep("Short_sumArea_", samples_df_long$variable),]
Short_sumArea$time<-Short_sumArea$year - min(Short_sumArea$year)

MTBS_stdJD<-samples_df_long[grep("MTBS_stdJD_", samples_df_long$variable),]
MTBS_stdJD$time<-MTBS_stdJD$year - min(MTBS_stdJD$year)

MODIS_stdJD<-samples_df_long[grep("MODIS_stdJD_", samples_df_long$variable),]
MODIS_stdJD$time<-MODIS_stdJD$year - min(MODIS_stdJD$year)

Short_stdJD<-samples_df_long[grep("Short_stdJD_", samples_df_long$variable),]
Short_stdJD$time<-Short_stdJD$year - min(Short_stdJD$year)

Perc_human<-samples_df_long[grep("Short_Number_fires_human", samples_df_long$variable),]
Perc_human$time<-Perc_human$year - min(Perc_human$year)

# create a list of these characteristics to pass to function below
fire_chars<-list(MODIS_numfires, MTBS_numfires, Short_numfires, MODIS_meanFRP, MODIS_maxFRP, MTBS_meanArea, MTBS_maxArea,  Short_meanArea, Short_maxArea, MTBS_sumArea, Short_sumArea, MTBS_stdJD, MODIS_stdJD, Short_stdJD, Perc_human)

# Function to compute mean annual (time) values of a fire characteristic (title) 
mean_annual_value<-function(title){
	value_by_year<-title %>% 
		group_by(time) %>% 
		summarise(
			count = n(),
			value_by_year= mean(value, na.rm = TRUE)
	)
	value_by_year
}

# pass this list to function above 
grouped_list_time=vector("list", 15)
for (i in 1:15){
	grouped_list_time[[i]]<-mean_annual_value(fire_chars[[i]])
}
names(grouped_list_time)<-names_vector

#fix the years
for(i in c(1,4, 5, 13)){
	grouped_list_time[[i]]$year<-grouped_list_time[[i]]$time+2003
}

for(i in c(2, 6, 7, 10, 12)){
	grouped_list_time[[i]]$year<-grouped_list_time[[i]]$time+1984
}

for(i in c(3, 8, 9, 11, 14, 15)){
	grouped_list_time[[i]]$year<-grouped_list_time[[i]]$time+1992
}



# Fit linear model for each
library(nlme)
lm_summary_list1<-vector("list", 15)
for (i in 1:15){
	lm_summary_list1[[i]]<-summary(lm(value ~ time, data=fire_chars[[i]], na.action=na.omit))
}

# Slopes of ign groups
slopes1<-data.frame(matrix(NA, nrow = 15, ncol = 2))
slopes1[,1]<-names_vector

for (i in 1:15){
	slopes1[i, 2]<-paste0(round(lm_summary_list1[[i]]$coefficients[2], 2), " (+/-", round(lm_summary_list1[[i]]$coefficients[4], 2), ")", 
	ifelse(lm_summary_list1[[i]]$coefficients[8]>0.1, "-",
	ifelse(lm_summary_list1[[i]]$coefficients[8]>0.05 & lm_summary_list1[[i]]$coefficients[15]<=0.1, "*",
	ifelse(lm_summary_list1[[i]]$coefficients[8]>0.01 & lm_summary_list1[[i]]$coefficients[15]<=0.05, "**",
	ifelse(lm_summary_list1[[i]]$coefficients[8]<=0.01, "***", NA)))))
}

names(slopes1)<-c("Fire characteristic", "Slope")

# Percent change over time period
initial<-vector("numeric", length=15)
final<-vector("numeric", 15)
change<-vector("numeric", 15)
perc_change<-vector("numeric", 15)

for (i in 1:15){
	initial[i]<-(summary(lm(value ~ time, data=fire_chars[[i]], na.action=na.omit))$coefficients[1])
	final[i]<-stats::predict.lm(lm(value ~ time, data=fire_chars[[i]], na.action=na.omit), newdata=data.frame(time=(max(fire_chars[[i]]$time)-min(fire_chars[[i]]$time))))
	change[i]<-final[i]-initial[i]
	perc_change[i]<-(change[i]/initial[i])*100
}

slopes1$perc_change<-round(perc_change)
names(slopes1)[3]<-"Percent change"


### Table S1
slopes1

# write.table(slopes1, "0_Anthro/Results/slopes1.txt")


make_gg_time_fig<-function(char, let){
	ggplot(data = grouped_list_time[[char]], aes(x = year, y = value_by_year)) +
	geom_point(aes(alpha=0.01)) +
	ggtitle(paste0(letters[let], ". ", names_vector[char], fig_sig[char,2])) +
	theme(plot.title = element_text(hjust = 0.5))+
	scale_color_manual(values=c(cbPalette))+
	geom_smooth(method="lm")+
	labs(x="Year", y=units_simple[char])+
	theme_bw()
}

# for fig 1
fig_sig<-data.frame(matrix(NA, nrow = 15, ncol = 2))
fig_sig[,1]<-names_vector
for (i in 1:15){
	fig_sig[i,2]<- ifelse(lm_summary_list1[[i]]$coefficients[8]>0.1, " ",
	ifelse(lm_summary_list1[[i]]$coefficients[8]>0.05 & lm_summary_list1[[i]]$coefficients[15]<=0.1, "*",
	ifelse(lm_summary_list1[[i]]$coefficients[8]>0.01 & lm_summary_list1[[i]]$coefficients[15]<=0.05, "**",
	ifelse(lm_summary_list1[[i]]$coefficients[8]<=0.01, "***", NA))))
}	

cbPalette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#CC79A7")

### Figure 1
ggarrange(make_gg_time_fig(4, 1), make_gg_time_fig(9, 2),  make_gg_time_fig(3, 3), 
make_gg_time_fig(14, 4), make_gg_time_fig(15, 5), 
ncol=2, nrow=3, legend=c("none"))

### Figure S2
make_gg_time<-function(char){
	ggplot(data = grouped_list_time[[char]], aes(x = year, y = value_by_year)) +
	geom_point(aes(alpha=0.01)) +
	ggtitle(paste0(letters[char], ". ", names_vector[char], fig_sig[char,2])) +
	theme(plot.title = element_text(hjust = 0.5))+
	scale_color_manual(values=c(cbPalette))+
	geom_smooth(method="lm")+
	labs(x="Year", y=units_simple[char])+
	theme_bw()
}

ggarrange(make_gg_time(1), make_gg_time(2),  make_gg_time(3), 
make_gg_time(4), make_gg_time(5),  make_gg_time(6), 
make_gg_time(7), make_gg_time(8),  make_gg_time(9), 
make_gg_time(10), make_gg_time(11),  make_gg_time(12), 
make_gg_time(13), make_gg_time(14),  make_gg_time(15),
ncol=3, nrow=5, legend=c("none"))

	
########################################################################
######################### 3. Characterizing fire~ign  ############################
########################################################################

names(samples_df)
nrow(samples_df[!is.na(samples_df$anthro),]) #3229
nrow(samples_df)

hist_table<-count(samples_df, vars = anthro)
hist_table$perc<-hist_table$n/sum(hist_table$n)
#24% not dominated by either anthro or lightning
# 65% are anthro-dominated
# 9% lightning-dominated
# 1% no fire

# Figure S3
hist(samples_df_mean$Perc_human_Short_mean, xlab="Proportion human ignitions", col="grey", main=" ")

	
# subset just cells where we can determine if anthro or not
samples_ign1<-samples_df[samples_df$anthro>0,]
samples_ign<-samples_ign1[!is.na(samples_ign1$anthro),]
# characteristics, ecoregion and ign type
samples_ign_mean<-samples_ign[,c(1:15, 379, 381)]


# Table S2
mean_char<-vector("list", 15)
sd_char<-vector("list", 15)
for (i in 1:15){
	mean_char[i]<-round(stats::aggregate(samples_ign_mean[,i], by=list(samples_ign_mean$ign), FUN=mean, na.rm=TRUE)[2],1)
	sd_char[i]<-round(stats::aggregate(samples_ign_mean[,i], by=list(samples_ign_mean$ign), FUN=sd, na.rm=TRUE)[2],1)
}
mean_char_df <- data.frame(matrix(unlist(mean_char), nrow=15, byrow=T))
sd_char_df <- data.frame(matrix(unlist(sd_char), nrow=15, byrow=T))
fire_char_ign<-cbind(mean_char_df,sd_char_df)

names(fire_char_ign)<-c("Human Ign Mean", "Lightning Ign Mean", "Human Ign Sd", "Lightning Ign Sd")
fire_characteristics_ign<-fire_char_ign
fire_characteristics_ign<-data.frame(matrix(NA, nrow = 15, ncol = 3))
names(fire_characteristics_ign)<-c("Characteristic", "Human Ign", "Lightning Ign")
for(i in 1:2){
	fire_characteristics_ign[,i+1]<-paste0(mean_char_df[,i], " (+/-", sd_char_df[,i], ")")
}

fire_characteristics_ign[,1]<-names(samples_ign_mean[c(1:15)])

# Stats on this
# compare two unpaired groups - Unpaired t for Gaussian and Mann-Whitney for non-Gaussian
# (Could use ks.test to see if gaussian (Kolmogorov-Smirnov Test)) - just assume not Gaussian
sig_char<-vector("numeric", length=15)
for (i in 1:15){
	sig_char[i]<-round(wilcox.test(samples_ign_mean[,i]~samples_ign_mean$ign)$p.value, 3) 
}
fire_characteristics_ign$sig<-ifelse(sig_char<=0.001, "***",
ifelse(sig_char<=0.01 & sig_char>0.001, "**",
ifelse(sig_char<=0.05 & sig_char>0.01, "*",-9999)))

### Table S2
fire_characteristics_ign
#write.table(fire_characteristics_ign, "0_Anthro/Results/2. TableS2_char~ign/fire_characteristics_ign.txt")

plot_ign_char<-function(x_char, xlim_2){
	ggplot(samples_ign_mean[samples_ign_mean[,x_char]!=0,], aes(x=samples_ign_mean[samples_ign_mean[,x_char]!=0, x_char], fill=samples_ign_mean[samples_ign_mean[,x_char]!=0,]$ign))+
	guides(fill=guide_legend(title="Ignition source"))+
	xlab (units_simple[x_char])+
	geom_density(alpha=.5)+
	ggtitle(paste0(letters[x_char], ". ",  names_vector[x_char], fire_characteristics_ign$sig[x_char]))+
	scale_fill_manual(values=c(cbPalette))+
	coord_cartesian(xlim = c(0, xlim_2))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}


### Figure S4
ggarrange(plot_ign_char(x_char=1, 150), plot_ign_char(x_char=2, 1.5), plot_ign_char(x_char=3, 100), 
plot_ign_char(x_char=4, 150), plot_ign_char(x_char=5, 1500), plot_ign_char(x_char=6, 25000),
plot_ign_char(x_char=7, 30000), plot_ign_char(x_char=8, 200), plot_ign_char(x_char=9, 700),
plot_ign_char(x_char=10, 20000), plot_ign_char(x_char=11, 800), plot_ign_char(x_char=12, 250),
plot_ign_char(x_char=13, 250), plot_ign_char(x_char=14, 250), plot_ign_char(x_char=15, 1.0), 
ncol=3, nrow=5, common.legend=TRUE, legend = c("top"))



#############################################################
############## 4. Characterizing fire~ign/time #####################
#############################################################

# For fires started by people vs lightning
# Function to compute mean annual (time) values of a fire characteristic (title) by ign type (ign)
  mean_annual_value_by_group<-function(title){
	value_by_group<-title %>% 
		group_by(ign, time) %>% 
		summarise(
			count = n(),
			value_by_group = mean(value, na.rm = TRUE)
	)
	value_by_group
}
  
 # pass this list to function above
grouped_list=vector("list", 15)
for (i in 1:15){
	grouped_list[[i]]<-mean_annual_value_by_group(fire_chars[[i]])
}

names(grouped_list)<-names_vector

#fix the years
for(i in c(1,4, 5, 13)){
	grouped_list[[i]]$year<-grouped_list[[i]]$time+2003
}

for(i in c(2, 6, 7, 10, 12)){
	grouped_list[[i]]$year<-grouped_list[[i]]$time+1984
}

for(i in c(3, 8, 9, 11, 14, 15)){
	grouped_list[[i]]$year<-grouped_list[[i]]$time+1992
}


# Fit linear model for each
library(nlme)
lm_summary_list<-vector("list", 15)
for (i in 1:15){
	lm_summary_list[[i]]<-summary(lmList(value ~ time | ign, data=fire_chars[[i]], na.action=na.omit))
}

# Slopes of ign groups
slopes<-data.frame(matrix(NA, nrow = 15, ncol = 3))
slopes[,1]<-names_vector

# pull out slopes and sig of slopes
for (i in 1:15){
	slopes[i, 2]<-paste0(round(lm_summary_list[[i]]$coefficients[14], 2), " (+/-", round(lm_summary_list[[i]]$coefficients[17], 2), ")", 
	ifelse(lm_summary_list[[i]]$coefficients[23]>0.1, " ",
	ifelse(lm_summary_list[[i]]$coefficients[23]>0.05 & lm_summary_list[[i]]$coefficients[23]<=0.1, "*",
	ifelse(lm_summary_list[[i]]$coefficients[23]>0.01 & lm_summary_list[[i]]$coefficients[23]<=0.05, "**",
	ifelse(lm_summary_list[[i]]$coefficients[23]<=0.01, "***", NA)))))

	slopes[i, 3]<-paste0(round(lm_summary_list[[i]]$coefficients[15], 2), " (+/-", round(lm_summary_list[[i]]$coefficients[18], 2), ")", 
	ifelse(lm_summary_list[[i]]$coefficients[24]>0.1, " ",
	ifelse(lm_summary_list[[i]]$coefficients[24]>0.05 & lm_summary_list[[i]]$coefficients[24]<=0.1, "*",
	ifelse(lm_summary_list[[i]]$coefficients[24]>0.01 & lm_summary_list[[i]]$coefficients[24]<=0.05, "**",
	ifelse(lm_summary_list[[i]]$coefficients[24]<=0.01, "***", NA)))))
}

slopes_diff<-data.frame(matrix(NA, nrow = 15, ncol = 2))
slopes_diff[,1]<-names_vector
names(slopes_diff)<-c("Fire characteristic", "Greater")

for (i in 1:15){
	slopes_diff[i, 2]<-ifelse(
	(lm_summary_list[[i]]$coefficients[14] > lm_summary_list[[i]]$coefficients[15] & 
	lm_summary_list[[i]]$coefficients[14] > (lm_summary_list[[i]]$coefficients[15] + lm_summary_list[[i]]$coefficients[18])), "Human", 
	ifelse(
	(lm_summary_list[[i]]$coefficients[15] > lm_summary_list[[i]]$coefficients[14] & 
	lm_summary_list[[i]]$coefficients[15] > (lm_summary_list[[i]]$coefficients[14] + lm_summary_list[[i]]$coefficients[17])), "Lightning", 
	"Neither"))
}

slope_stuff<-cbind(slopes, slopes_diff)
slope_stuff<-slope_stuff[,c(-4)]



# Percent change for each over time period
# Anthro ignitions
initial<-vector("list", 15)
final<-vector("list", 15)
change<-vector("list", 15)
perc_change<-vector("list", 15)

for (c in 1:15){
	for (i in 2:3){
		initial[[c]][i]<-(summary(lmList(value ~ time | ign, data=fire_chars[[c]], na.action=na.omit))$coefficients[i])
		final[[c]][i]<-(stats::predict.lm(lmList(value ~ time | ign, data=fire_chars[[c]], na.action=na.omit)[[i]], newdata=data.frame(time=(max(fire_chars[[c]]$time)-min(fire_chars[[c]]$time)))))
		change[[c]][i]<-final[[c]][i]-initial[[c]][i]
		perc_change[[c]][i]<-(change[[c]][i]/initial[[c]][i])*100
	}
}

names(perc_change)<-names_vector

perc_change_human<-vector("numeric", length=15)
perc_change_lightning<-vector("numeric", length=15)
for (i in 1:15){
	perc_change_human[i]<-perc_change[[i]][2]
	perc_change_lightning[i]<-perc_change[[i]][3]
}

slope_stuff$perc_change_human<-round(perc_change_human,2)
slope_stuff$perc_change_lightning<-round(perc_change_lightning,2)

### Table S3
slope_stuff
# write.table(slope_stuff, "0_Anthro/Results/slope_stuff.txt")

# plots of those data
make_gg<-function(char){
	ggplot(data = grouped_list[[char]][(grouped_list[[char]]$ign=="Human" | grouped_list[[char]]$ign=="Lightning"),], aes(x = year, y = value_by_group)) +
	ggtitle(paste0(letters[char], ". ", names_vector[char]))+
	geom_point(aes(color = factor(ign))) +
	scale_color_manual(values=c(cbPalette))+
	geom_smooth(method="lm", aes(group = ign, color = factor(ign)))+
	labs(x="Year", y=units_simple[char], colour="Ignition type")+
	theme_bw()
}
	

## Figure S5
ggarrange(make_gg(1), make_gg(2), make_gg(3), 
make_gg(4), make_gg(5), make_gg(6), 
make_gg(7), make_gg(8),make_gg(9), 
make_gg(10), make_gg(11), make_gg(12), 
make_gg(13), make_gg(14), make_gg(15),  
ncol=3, nrow=5, legend=c("right"), common.legend=TRUE)




plot_ign_char1<-function(x_char, xlim_2, let){
	ggplot(samples_ign_mean[samples_ign_mean[,x_char]!=0,], aes(x=samples_ign_mean[samples_ign_mean[,x_char]!=0, x_char], fill=samples_ign_mean[samples_ign_mean[,x_char]!=0,]$ign))+
	guides(fill=guide_legend(title="Ignition source"))+
	xlab (units_simple[x_char])+
	geom_density(alpha=.5)+
	ggtitle(paste0(letters[let], ". ",  names_no_units[x_char], fire_characteristics_ign$sig[x_char]))+
	scale_fill_manual(values=c(cbPalette))+
	coord_cartesian(xlim = c(0, xlim_2))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"))
}

make_gg1<-function(char, let){
	ggplot(data = grouped_list[[char]][(grouped_list[[char]]$ign=="Human" | grouped_list[[char]]$ign=="Lightning"),], aes(x = year, y = value_by_group)) +
	geom_point(aes(color = factor(ign))) +
	scale_color_manual(values=c(cbPalette))+
	ggtitle(paste0(letters[let], ". "))+
	geom_smooth(method="lm", aes(group = ign, color = factor(ign)))+
	labs(x="Year", y=units_simple[char], colour="Ignition type")+
	theme_bw()
}
		
		
### Figure 2 - c-j
# Lightning has more extreme average fires
# Human has more frequent fires with longer seasonality
ggarrange(plot_ign_char1(x_char=4, 150, 3), plot_ign_char1(x_char=8, 200, 4),   plot_ign_char1(x_char=3, 100, 5), plot_ign_char1(x_char=14, 250, 6), make_gg1(4, 7), make_gg1(8, 8), make_gg1(3, 9), make_gg1(14, 10), ncol=4, nrow=2, legend=c("none"))



######################################################
##### 5. Characterizing fire~ign_ecoregion ###################
######################################################

# Do these trends vary spatially across the US? 
# map of us - colored by ecoregion for human or anthro greater and by how much?

# map of ecoregion locations
library(stringr)
samples_df$ecoregion2<-str_to_title(samples_df$ecoregion)

eco_plot<-function(data){
	ggplot(data, aes(x, y)) + 
	geom_point(aes(color = factor(ecoregion2))) +  
	coord_equal() +
	labs(colour="Ecoregion")+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}

eco_plot(samples_df)

# Eco names 3, 7, 9, 10 dominated just by human ignitions
# remove Water and NA
eco_names<-unique(samples_df$ecoregion)[c(1, 7, 3, 9, 5, 2, 4, 11, 10, 12)]



# Function to compute mean values of a fire characteristic (title) by ignition type (ign) and ecoregion (ecoregion)
mean_eco_value<-function(title){
	mean_value_by_eco<-title %>% 
		group_by(ign, ecoregion) %>% 
		summarise(
			count = n(),
			mean_value_by_eco= mean(value, na.rm = TRUE)
	)
	mean_value_by_eco
}

sd_eco_value<-function(title){
	sd_value_by_eco<-title %>% 
		group_by(ign, ecoregion) %>% 
		summarise(
			count = n(),
			sd_value_by_eco= sd(value, na.rm = TRUE)
	)
	sd_value_by_eco
}


# pass this list to function above 
mean_grouped_list_eco=vector("list", 15)
sd_grouped_list_eco=vector("list", 15)
for (i in 1:15){
	mean_grouped_list_eco[[i]]<-mean_eco_value(fire_chars[[i]])
	sd_grouped_list_eco[[i]]<-sd_eco_value(fire_chars[[i]])
}
names(mean_grouped_list_eco)<-names_vector
names(sd_grouped_list_eco)<-names_vector


mean_grouped_list_eco[[1]][c(13:31),]
sd_grouped_list_eco[[1]][c(13:31),]


samples_ign_mean_eco<-samples_ign_mean
samples_ign_mean_eco$ecoregion<-as.factor(samples_ign_mean$ecoregion)
samples_ign_mean_eco$ign<-as.factor(samples_ign_mean_eco$ign)
eco_characteristics<-vector("list", 15)
for (i in 1:15){
	eco_characteristics[[i]]<-aggregate(samples_ign_mean_eco[,i], by=list(samples_ign_mean_eco$ign, samples_ign_mean_eco$ecoregion), FUN=mean, na.rm=TRUE)
	eco_characteristics[[i]]$sd<-aggregate(samples_ign_mean_eco[,i], by=list(samples_ign_mean_eco$ign, samples_ign_mean_eco$ecoregion), FUN=sd, na.rm=TRUE)[3]
}

names(eco_characteristics)<-names(samples_ign_mean_eco[,1:15])

for(i in 1:15){
	for(n in 1:15){
	eco_characteristics[[i]][n,5]<-paste0(round(eco_characteristics[[i]][n,3], 1), "(+/-", round(eco_characteristics[[i]][n,4], 1), ")")
	}
	eco_characteristics[[i]]<-eco_characteristics[[i]][,c(1:3, 5)]
	names(eco_characteristics[[i]])<-c("Ign", "Eco", "Mean", "Value")
}

# convert to wide
fire_characteristics_ign_eco<-vector("list", 15)
for(i in 1:15){
	fire_characteristics_ign_eco[[i]]<-spread(eco_characteristics[[i]][c(1:14),c(1,2,4)], key=Ign, value=Value)
	names(fire_characteristics_ign_eco[[i]])<-c("Ecoregion", "Human Ign", "Lightning Ign")
}

# samples_ign_mean<-samples_ign[,c(1:15, 387, 389)]

# Stats on this
# compare two unpaired groups - Unpaired t for Gaussian and Mann-Whitney for non-Gaussian
# (Could use ks.test to see if gaussian (Kolmogorov-Smirnov Test)) - just assume not Gaussian

# list for each 
samples_ign_mean_eco_each<-vector("list", 10)
for (i in 1:10){
	samples_ign_mean_eco_each[[i]]<-samples_ign_mean_eco[samples_ign_mean_eco$ecoregion==eco_names[i],]
}
names(samples_ign_mean_eco_each)<-eco_names

sig_char_eco<-vector("list", 15)
for (i in 1:15){
	for (n in 1:10){
		if(length(unique(samples_ign_mean_eco_each[[n]][which(!is.na(samples_ign_mean_eco_each[[n]]$ign)),]$ign))==2){
		sig_char_eco[[i]][n]<-(wilcox.test(samples_ign_mean_eco_each[[n]][which(!is.na(samples_ign_mean_eco_each[[n]]$ign)),i]~samples_ign_mean_eco_each[[n]][which(!is.na(samples_ign_mean_eco_each[[n]]$ign)),]$ign)$p.value)
		} else{
		sig_char_eco[[i]][n]<-9999
		} 
	}
}


for (i in 1:15){		
	for (n in 1:10){
		fire_characteristics_ign_eco[[i]]$sig[n]<-ifelse(sig_char_eco[[i]][n]<=0.01, "***", 
		ifelse(sig_char_eco[[i]][n]<=0.05 & sig_char_eco[[i]][n]>0.01, "**",
		ifelse(sig_char_eco[[i]][n]<=0.1 & sig_char_eco[[i]][n]>0.05, "*",
		ifelse(sig_char_eco[[i]][n]<=9000 & sig_char_eco[[i]][n]>0.1, "---",
		ifelse(sig_char_eco[[i]][n]>9000, "NA")))))
	}	
}
			
### Table S5
fire_characteristics_ign_eco
# write.table(fire_characteristics_ign_eco, "0_Anthro/Results/fire_characteristics_ign_eco.txt")

# for mapping:
# Mean values rather than +/- sd as above
fire_characteristics_ign_eco_map<-vector("list", 15)
for(i in 1:15){
	fire_characteristics_ign_eco_map[[i]]<-spread(eco_characteristics[[i]][c(1,2,3)], key=Ign, value=Mean)
	names(fire_characteristics_ign_eco_map[[i]])<-c("Ecoregion", "Human", "Lightning")
}

for (i in 1:15){		
	for (n in 1:10){
		fire_characteristics_ign_eco_map[[i]]$sig[n]<-(sig_char_eco[[i]][n])
	}	
}

for (i in 1:15){		
	for (n in 1:10){
		fire_characteristics_ign_eco_map[[i]]$cat_greater[n]<-ifelse(fire_characteristics_ign_eco_map[[i]]$Human[n]>fire_characteristics_ign_eco_map[[i]]$Lightning[n] , "Human", "Lightning")
	}
}
		
for (i in 1:15){		
	for (n in 1:10){
		fire_characteristics_ign_eco_map[[i]]$category[n]<-ifelse(fire_characteristics_ign_eco_map[[i]]$cat_greater[n]=="Human" & fire_characteristics_ign_eco_map[[i]]$sig[n]<=0.1, "Human", 
		ifelse(fire_characteristics_ign_eco_map[[i]]$cat_greater[n]=="Human" & fire_characteristics_ign_eco_map[[i]]$sig[n]>0.1, "Human, not sig",
		ifelse(fire_characteristics_ign_eco_map[[i]]$cat_greater[n]=="Lightning" & fire_characteristics_ign_eco_map[[i]]$sig[n]<=0.1, "Lightning",
		ifelse(fire_characteristics_ign_eco_map[[i]]$cat_greater[n]=="Lightning" & fire_characteristics_ign_eco_map[[i]]$sig[n]>0.1, "Lightning, not sig",  
		-9999))))
	}
}

for (i in 1:15){		
	for (n in 1:10){
		fire_characteristics_ign_eco_map[[i]]$category[n][is.na(fire_characteristics_ign_eco_map[[i]]$category[n])]<-"Dominated by human ign only"
	}
}

# merge with ecoregion, x, and y
new_df<-vector('list', 15)
for (i in 1:15){
	new_df[[i]]<-merge(samples_df[,c(377:378, 379)], fire_characteristics_ign_eco_map[[i]][,c(1,2, 3, 7)], by.x="ecoregion", by.y="Ecoregion")
}

make_gg_eco<-function(char){
	ggplot(new_df[[char]],  aes(x, y)) + 
	coord_equal() +
	geom_point(aes(color = factor(category))) +  
	scale_color_manual(values = c("Dominated by human ign only"="firebrick4", "Human" = "firebrick2", "Human, not sig"="bisque2", "Lightning"="dodgerblue3", "Lightning, not sig"="slategray2"))+
	labs(colour="Ignition source with higher value")+
 	theme(plot.title = element_text(hjust = 0.5))+
 	ggtitle(paste0(letters[char], ". ", names_vector[char]))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}
	
### Figure S6
ggarrange(make_gg_eco(1), make_gg_eco(2), make_gg_eco(3), make_gg_eco(4), make_gg_eco(5), make_gg_eco(6), make_gg_eco(7), make_gg_eco(8), make_gg_eco(9), ncol=3, nrow=3, legend=c("right"), common.legend=TRUE)
ggarrange(make_gg_eco(10),make_gg_eco(11),  make_gg_eco(12), make_gg_eco(13), 
make_gg_eco(14), make_gg_eco(15), ncol=3, nrow=2, legend="none")


make_gg_eco_char_human<-function(char){
	ggplot(new_df[[char]],  aes(x, y)) + 
	coord_equal() +
	geom_point(aes(color = Human)) +  
	scale_color_gradient(low="yellow", high="red", limits=c(0, max(eco_characteristics[[char]]$Mean, na.rm=TRUE)))+
	labs(colour=units_simple[[char]])+
 	theme(plot.title = element_text(hjust = 0.5))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}


make_gg_eco_char_light<-function(char){
	ggplot(new_df[[char]],  aes(x, y)) + 
	coord_equal() +
	geom_point(aes(color = Lightning)) +  
	scale_color_gradient(low="yellow", high="red", limits=c(0, max(eco_characteristics[[char]]$Mean, na.rm=TRUE)))+
	labs(colour=units_simple[[char]])+
 	theme(plot.title = element_text(hjust = 0.5))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}

# Figure 4
#dev.off() 
ggarrange(make_gg_eco_char_light(4), make_gg_eco_char_human(4), 
make_gg_eco_char_light(6), make_gg_eco_char_human(6),
make_gg_eco_char_light(2), make_gg_eco_char_human(2),
make_gg_eco_char_light(12), make_gg_eco_char_human(12),
ncol=2, nrow=4, legend=c("right"))

make_gg_eco_fig<-function(char){
	ggplot(new_df[[char]],  aes(x, y)) + 
	coord_equal() +
	geom_point(aes(color = factor(category))) +  
	scale_color_manual(values = c("Dominated by human ign only"="firebrick4", "Human" = "firebrick2", "Human, not sig"="bisque2", "Lightning"="dodgerblue3", "Lightning, not sig"="slategray2"))+
	labs(colour="Ignition source with higher value")+
 	theme(plot.title = element_text(hjust = 0.5))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}
	
ggarrange(make_gg_eco_fig(4),
make_gg_eco_fig(6),
make_gg_eco_fig(2),
make_gg_eco_fig(12),
ncol=1, nrow=4, legend=c("right"))



###########################################################
##### 6. Characterizing fire~ign_ecoregion/time ###################
###########################################################

# Do these trends vary spatially across the US? 


# Function to compute mean annual (time) values of a fire characteristic (title) by ign type (ign) and ecoregion (eco)
mean_annual_value_by_eco<-function(title){
	value_by_group<-title %>% 
		group_by(ign, ecoregion, time) %>% 
		summarise(
			count = n(),
			value_by_group = mean(value, na.rm = TRUE)
	)
	value_by_group
}

# pass this list to function above 
grouped_list_eco=vector("list", 15)
for (i in 1:15){
	grouped_list_eco[[i]]<-mean_annual_value_by_eco(fire_chars[[i]])
}

# if get an error - detach("package:plyr", unload=TRUE) 

names(grouped_list_eco)<-names_vector

#fix the years
for(i in c(1,4, 5, 13)){
	grouped_list_eco[[i]]$year<-grouped_list_eco[[i]]$time+2003
}

for(i in c(2, 6, 7, 10, 12)){
	grouped_list_eco[[i]]$year<-grouped_list_eco[[i]]$time+1984
}

for(i in c(3, 8, 9, 11, 14, 15)){
	grouped_list_eco[[i]]$year<-grouped_list_eco[[i]]$time+1992
}


###	if(length(unique(samples_ign_mean_eco_each[[n]][which(!is.na(samples_ign_mean_eco_each[[n]]$ign)),]$ign))==2){

# Fit linear model for each ecoregion
library(nlme)

lm_slope_list_human_eco<-vector("list", 15)
for (i in 1:15){
	for (n in 1:10){
		if(length(unique(fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],]$ign))==4){
		lm_slope_list_human_eco[[i]][n]<-(summary(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],], na.action=na.omit))$coefficients[14])
		} else{
		lm_slope_list_human_eco[[i]][n]<-(summary(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n]& fire_chars[[i]]$ign=="Human",], na.action=na.omit))$coefficients[5])
		} 
	}
}


lm_sig_list_human_eco<-vector("list", 15)
for (i in 1:15){
	for (n in 1:10){
		if(length(unique(fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],]$ign))==4){
		lm_sig_list_human_eco[[i]][n]<-summary(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],], na.action=na.omit))$coefficients[23]
		} else{
		lm_sig_list_human_eco[[i]][n]<-(summary(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n]& fire_chars[[i]]$ign=="Human",], na.action=na.omit))$coefficients[8])
		} 
	}
}

lm_slope_list_lightning_eco<-vector("list", 15)
for (i in 1:15){
	for (n in 1:10){
		if(length(unique(fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],]$ign))==4){
		lm_slope_list_lightning_eco[[i]][n]<-(summary(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],], na.action=na.omit))$coefficients[15])
		} else{
		lm_slope_list_lightning_eco[[i]][n]<-"NA"
		} 
	}
}

lm_sig_list_lightning_eco<-vector("list", 15)
for (i in 1:15){
	for (n in 1:10){
		if(length(unique(fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],]$ign))==4){
		lm_sig_list_lightning_eco[[i]][n]<-summary(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],], na.action=na.omit))$coefficients[24]
		} else{
		lm_sig_list_lightning_eco[[i]][n]<-"NA"
		} 
	}
}

lm_slope_human_eco<-unlist(lm_slope_list_human_eco)
lm_sig_human_eco<-unlist(lm_sig_list_human_eco)
lm_slope_lightning_eco<-as.numeric(unlist(lm_slope_list_lightning_eco))
lm_sig_lightning_eco<-as.numeric(unlist(lm_sig_list_lightning_eco))
lm_sig_lightning_eco<-ifelse(lm_sig_lightning_eco=="NaN", 1, lm_sig_lightning_eco)


# Percent change for each over time period
# Anthro ignitions
initial_human<-vector("list", 15)
final_human<-vector("list", 15)
change_human<-vector("list", 15)
perc_change_human<-vector("list", 15)

for (i in 1:15){
	for (n in 1:10){
		initial_human[[i]][n]<-summary(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n]& fire_chars[[i]]$ign=="Human",], na.action=na.omit))$coefficients[1]
		final_human[[i]][n]<-stats::predict.lm(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n] & fire_chars[[i]]$ign=="Human",], na.action=na.omit)[[1]], newdata=data.frame(time=(max(fire_chars[[i]]$time)-min(fire_chars[[i]]$time))))
		change_human[[i]][n]<-final_human[[i]][n]-initial_human[[i]][n]
		perc_change_human[[i]][n]<-(change_human[[i]][n]/initial_human[[i]][n])*100
	}
}


initial_light<-vector("list", 15)
final_light<-vector("list", 15)

for (i in 1:15){
	for (n in 1:10){
		if(length(unique(fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],]$ign))==4){
		initial_light[[i]][n]<-summary(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],], na.action=na.omit))$coefficients[3]
		final_light[[i]][n]<-stats::predict.lm(lmList(value ~ time | ign, data=fire_chars[[i]][fire_chars[[i]]$ecoregion==eco_names[n],], na.action=na.omit)[[3]], newdata=data.frame(time=(max(fire_chars[[i]]$time)-min(fire_chars[[i]]$time))))
		} else{		
		initial_light[[i]][n]<--9999
		final_light[[i]][n]<--9999
		}	
	}
}


change_light<-vector("list", 15)
perc_change_light<-vector("list", 15)

for (i in 1:15){
	for (n in 1:10){
		change_light[[i]][n]<--9999
		perc_change_light[[i]][n]<-9999
	}
}

for (i in 1:15){
	for (n in (c(2, 5, 7, 9))){
		change_light[[i]][n]<-final_light[[i]][n]-initial_light[[i]][n]
		perc_change_light[[i]][n]<-(change_light[[i]][n]/initial_light[[i]][n])*100	
	}
}

perc_change_human_eco<-unlist(perc_change_human)
perc_change_lightning_eco<-unlist(perc_change_light)


# Slopes of ign groups by ecoregion
slopes_eco<-data.frame(matrix(NA, nrow = 150, ncol = 4))
slopes_eco[,1]<-eco_names

for (i in 1:150){
	slopes_eco[i, 2]<-ifelse(lm_slope_human_eco[i]=="NA", "NA",
	paste0(round(lm_slope_human_eco[i],2), 
	ifelse(lm_sig_human_eco[i]>0.1, " ",
	ifelse(lm_sig_human_eco[i]>0.05 & lm_sig_human_eco[i]<=0.1, "*",
	ifelse(lm_sig_human_eco[i]>0.01 & lm_sig_human_eco[i]<=0.05, "**",
	ifelse(lm_sig_human_eco[i]<=0.01, "***", "    "))))))

	slopes_eco[i, 3]<-ifelse(lm_slope_lightning_eco[i]=="NA", "NA",
	paste0(round(lm_slope_lightning_eco[i], 2), 
	ifelse(as.numeric(lm_sig_lightning_eco[i])>0.1, " ",
	ifelse(as.numeric(lm_sig_lightning_eco[i])>0.05 & lm_sig_lightning_eco[i]<=0.1, "*",
	ifelse(as.numeric(lm_sig_lightning_eco[i])>0.01 & lm_sig_lightning_eco[i]<=0.05, "**",
	ifelse(as.numeric(lm_sig_lightning_eco[i])<=0.01, "***", "    "))))))

	slopes_eco[i, 4]<-ifelse(is.na(lm_slope_lightning_eco[i]), "Dominated by human ign only",
	ifelse(lm_slope_human_eco[i]>lm_slope_lightning_eco[i] & lm_sig_human_eco[i]<=0.1, "Human",
	ifelse(lm_slope_human_eco[i]>lm_slope_lightning_eco[i] & lm_sig_human_eco[i]>0.1, "Human, not sig",
	ifelse(lm_slope_lightning_eco[i]>lm_slope_human_eco[i] & lm_sig_lightning_eco[i]<=0.1, "Lightning",
	ifelse(lm_slope_lightning_eco[i]>lm_slope_human_eco[i] & lm_sig_lightning_eco[i]>0.1, "Lightning, not sig",
	"NA")))))	

	slopes_eco[i, 5]<-perc_change_human_eco[i]	
	slopes_eco[i, 6]<-perc_change_lightning_eco[i]	
	slopes_eco[i, 7]<-ifelse(lm_slope_human_eco[i]=="NA", "NA", round(lm_slope_human_eco[i],2))
	slopes_eco[i, 8]<-ifelse(lm_slope_lightning_eco[i]=="NA", "NA", round(lm_slope_lightning_eco[i],2))
}

names(slopes_eco)<-c("Ecoregion", "Human", "Lightning", "Higher", "Percent_change_Human", "Percent_change_Lightning", "Human2", "Lightning2")


slopes_eco
# write.table(slopes_eco, "0_Anthro/Results/slopes_eco.txt")



change_ign_eco_map<-slopes_eco[,c(1,4, 7,8)]
change_ign_eco_map$char<-rep(names_vector, each=10)
head(change_ign_eco_map)

# Make it a list for each characteristic
# In a weird order
change_ign_eco_map_list<-split(change_ign_eco_map, as.factor(change_ign_eco_map$char))
# fix the order
change_ign_eco_map_list1<-change_ign_eco_map_list[c(names_vector)]


# merge with ecoregion, x, y, and ign?
new_df_time<-vector('list', 15)
for (i in 1:15){
	new_df_time[[i]]<-merge(samples_df[,c(377:379, 381)], change_ign_eco_map_list1[[i]], by.x="ecoregion", by.y="Ecoregion")
}


make_gg_eco_time<-function(character){
	ggplot(new_df_time[[character]],  aes(x, y)) + 
	coord_equal() +
	geom_point(aes(color = factor(Higher))) +  
	scale_color_manual(values = c("Dominated by human ign only"="firebrick4", "Human" = "firebrick2", "Human, not sig"="bisque2", "Lightning"="dodgerblue3", "Lightning, not sig"="slategray2"))+
	labs(colour="Ignition source with higher value")+
 	theme(plot.title = element_text(hjust = 0.5))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}
	
	
### Figure S7
ggarrange(make_gg_eco_time(1)+ggtitle(names_vector[1]), 
make_gg_eco_time(2)+ggtitle(names_vector[2]), 
make_gg_eco_time(3)+ggtitle(names_vector[3]), 
make_gg_eco_time(4)+ggtitle(names_vector[4]),  
make_gg_eco_time(5)+ ggtitle(names_vector[5]), 
make_gg_eco_time(6)+	 ggtitle(names_vector[6]), 
make_gg_eco_time(7)+	 ggtitle(names_vector[7]),  
make_gg_eco_time(8)+	 ggtitle(names_vector[8]),  
make_gg_eco_time(9)+	 ggtitle(names_vector[9]), 
ncol=3, nrow=3, legend=c("none"))
ggarrange(make_gg_eco_time(10)+ggtitle(names_vector[10]), 
make_gg_eco_time(11)+ggtitle(names_vector[11]), 
make_gg_eco_time(12)+ggtitle(names_vector[12]), 
make_gg_eco_time(13)+ggtitle(names_vector[13]), 
make_gg_eco_time(14)+ggtitle(names_vector[14]),  
make_gg_eco_time(15)+ ggtitle(names_vector[15]),  
ncol=3, nrow=2, legend=c("none"))



limits<-vector('list', 15)
for (i in 1:15){
	limits[[i]]<-c(ifelse(min(change_ign_eco_map_list1[[i]]$Human2, na.rm=TRUE)<min(change_ign_eco_map_list1[[i]]$Lightning2, na.rm=TRUE), min(change_ign_eco_map_list1[[i]]$Human2, na.rm=TRUE), min(change_ign_eco_map_list1[[i]]$Lightning2, na.rm=TRUE)), ifelse(max(change_ign_eco_map_list1[[i]]$Human2, na.rm=TRUE)>max(change_ign_eco_map_list1[[i]]$Lightning2, na.rm=TRUE), max(change_ign_eco_map_list1[[i]]$Human2, na.rm=TRUE), max(change_ign_eco_map_list1[[i]]$Lightning2, na.rm=TRUE)))
}


make_gg_eco_time_human<-function(char){
	ggplot(new_df_time[[char]],  aes(x, y)) + 
	coord_equal() +
	geom_point(aes(color = Human2)) +  
	scale_color_gradient(low="yellow", high="red", limits=c(limits[[char]]))+
	labs(colour=units_simple[[char]])+
 	theme(plot.title = element_text(hjust = 0.5))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}

# 	ggtitle(names_no_units[char]) +
# after "red", limits=c(limits[[char]]))+

make_gg_eco_time_light<-function(char){
	ggplot(new_df_time[[char]],  aes(x, y)) + 
	coord_equal() +
	geom_point(aes(color = Lightning2)) +  
	scale_color_gradient(low="yellow", high="red", limits=c(limits[[char]]))+
	labs(colour=units_simple[[char]])+
 	theme(plot.title = element_text(hjust = 0.5))+
	theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_blank(), axis.text.x=element_blank(), axis.text.y=element_blank(),axis.ticks.x=element_blank(), axis.ticks.y=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank())+
	geom_polygon(data=overlay, aes(x=long, y=lat, group=group), fill=NA, colour="black")
}


### Figure - not used
#dev.off() 
# ggarrange(make_gg_eco_time_light(4), make_gg_eco_time_human(4), 
make_gg_eco_time_light(8), make_gg_eco_time_human(8), 
make_gg_eco_time_light(3), make_gg_eco_time_human(3), 
make_gg_eco_time_light(14), make_gg_eco_time_human(14), 
ncol=2, nrow=4, legend=c("right"))

# ggarrange(make_gg_eco_time(4),
make_gg_eco_time(8),
make_gg_eco_time(3),
make_gg_eco_time(14),
ncol=1, nrow=4, legend=c("right"))


##########################################################################################
########### 7. Segmentation - Relationship between anthropogenic ignitions and fire physical characteristics ##########
##########################################################################################

################################
# ANCOVA: http://r-eco-evo.blogspot.com/2011/08/comparing-two-regression-slopes-by.html
#size_SL<-aov(Std_JD_MTBS_mean~Max_area_MTBS_mean*anthro, data=samples_df)
# summary(size_SL)
# Ancova useful for predicting effect of group membership on response while controlling for another variable, mixed model might be better here bc we want to see effect of variables and group membership
################################


######## Human effects on different variables
names(samples_df)	

# make each column + anthro a list of data frames
data_list<-vector("list", 15)																# list of data
regression_list<-vector("list", 15)															# regressions
davies_list<-vector("list", 15)																# Davies test on regressions
num_breaks<-vector("numeric", 15)														# number of breaks
davies.significance<-vector("character", 15)													# significance of Davies test (for last significant one)
adj.r.square<-vector("numeric", length=15)													# adjusted r of model (regression or segmented)
segmented_list<-vector("list", 15)															# segmented regressions
slopes<-vector("character", length=15)														# p value of model (regression or segmented)
slopes2<-vector("numeric", length=15)														# p value of model (regression or segmented)
breaks<-vector("numeric", length=15)														# p value of model (regression or segmented)

set.seed(167)

# make data list of characteristics and percent ign
for(i in 1:length(data_list)){
	data_list[[i]]<-na.omit(data.frame(samples_df[,i], samples_df[,15]))		# each item in list is data frame of each fire characteristic and anthro ign
	names(data_list[[i]])<-c("depend.var", "anthro")						# name columns of each dataframe in list
	data_list[[i]]<-data_list[[i]][data_list[[i]]$depend.var>0,]			# remove 0 values of dependent variable
	regression_list[[i]]<-(lm(depend.var~anthro, data=data_list[[i]]))		# run a linear regression on the data
	davies_list[[i]]<-davies.test(regression_list[[i]], seg.Z=~anthro, k = 10)	# Davies' test on each regression model object. If significant, there's a breakpoint
	
	if(davies_list[[i]]$p.value>0.05){									# If the Davies' test does not indicate that there is a breakpoint...
		num_breaks[i]<-0											#  the number of breaks is 0
		davies.significance[[i]]<-"--"									# Davies is not significant
		adj.r.square[i]<-round(summary(regression_list[[i]])$adj.r.square,3)	# The adjused r2 is from the regression
		segmented_list[[i]]<-"NA"																	# dont need to segment
		slopes[i]<-paste0(round(summary(regression_list[[i]])$coefficients[2,1],2), ifelse(summary(regression_list[[i]])$coefficients[2,4]<=0.01, "***", ifelse(summary(regression_list[[i]])$coefficients[2,4]>0.01&summary(regression_list[[i]])$coefficients[2,4]<=0.05, "**", ifelse(summary(regression_list[[i]])$coefficients[2,4]>0.05&summary(regression_list[[i]])$coefficients[2,4]<=0.1, "*", "--"))))																						# slope from the regression, other slopes not relevant
		slopes2[i]<-"NA"	
	} else {																												# If the Davies' test does indicate that there is at least one breakpoint...
		num_breaks[i]<-1
		segmented_list[[i]]<-"TBD"
	}
}

		davies.significance[[i]]<-"TBD"
		adj.r.square[i]<-"TBD"
		slopes[i]<-"TBD"
		slopes2[i]<-"TBD"

######## HERE #######

# Check it
num_breaks
davies.significance
adj.r.square
segmented_list
slopes
slopes2


# run the segmented models
for (i in 1:15){
	if(segmented_list[[i]]!="NA"){
		bo=0
		while(bo!=1000){
			segmented_list[[i]] = try(segmented::segmented(lm(depend.var~anthro, data=data_list[[i]]), seg.Z =~anthro, psi = c(.7)),silent=TRUE)
			if (class(segmented_list[[i]])=="try-error") {
				bo <- bo+1
				print(bo)
			} else
			break
  	}
	}
}



for (i in 1:15) {
	if(num_breaks[i]=="1") {	
		davies.significance[[i]]<-round(davies_list[[i]]$p.value, 3)
		adj.r.square[i]<-round(summary(segmented_list[[i]])$adj.r.square,3)
		slopes[i]<-paste0(round(summary(segmented_list[[i]])$coefficients[2,1], 2), ifelse(summary(segmented_list[[i]])$coefficients[2,4]<=0.01, "***", ifelse(summary(segmented_list[[i]])$coefficients[2,4]>0.01&summary(segmented_list[[i]])$coefficients[2,4]<=0.05, "**", ifelse(summary(segmented_list[[i]])$coefficients[2,4]>0.05&summary(segmented_list[[i]])$coefficients[2,4]<=0.1, "*", "--"))))
		slopes2[i]<-paste0(round((summary(segmented_list[[i]])$coefficients[2,1]+summary(segmented_list[[i]])$coefficients[3,1]), 2),  ifelse(summary(segmented_list[[i]])$coefficients[3,4]<=0.01, "***", ifelse(summary(segmented_list[[i]])$coefficients[3,4]>0.01&summary(segmented_list[[i]])$coefficients[3,4]<=0.05, "**", ifelse(summary(segmented_list[[i]])$coefficients[3,4]>0.05&summary(segmented_list[[i]])$coefficients[3,4]<=0.1, "*", "--"))))
		breaks[i]<-segmented_list[[i]]$psi[2] 
	}
}



##### To make the figures
# plot the stuff with the appropriate model

plot_segmented<- function(number){
	for (i in number:number){
		par("mar"=c(5,5,1,1))
		plot(data_list[[i]]$anthro, data_list[[i]]$depend.var, xlab="Proportion anthropogenic ignitions", ylab=units_simple[i], cex.lab=1.5, col="lightgray", main=names_no_units[i])
		if (num_breaks[i]=="1"){
			plot(segmented_list[[i]], rug=FALSE, add=TRUE)
			lines(segmented_list[[i]], col="blue")
		} else if (num_breaks[i]=="0"){
			abline(regression_list[[i]])		}
	}
}

# All variables
par(mfrow=c(3,5))
for (i in 1:14){
	plot_segmented(i)
}


# Figure 3
par(mfrow=c(2,2))
for (i in c(4, 8, 3, 14)){
	plot_segmented(i)
}

slopes[c(4, 8, 3, 14)]
slopes2[c(4, 8, 3, 14)]




### Table S4
seg_table<-cbind(adj.r.square, num_breaks, breaks, slopes, slopes2)
# write.csv(seg_table, "0_Anthro/Results/seg_table.csv")


######################################################################################
########### 8. Human fires are smaller and less intense... because of season length and freq? ##########
#####################################################################################

## MODIS

names(samples_df_mean)

summary(samples_df_mean$Perc_human_Short_mean)[2]
samples_df_mean$anthro_group4<-
ifelse(samples_df_mean$Perc_human_Short_mean<=samples_df_mean$Perc_human_Short_mean[2], 1, 
ifelse(samples_df_mean$Perc_human_Short_mean<=samples_df_mean$Perc_human_Short_mean[3] & samples_df_mean$Perc_human_Short_mean>samples_df$Perc_human_Short_mean[2], 2, 
ifelse(samples_df_mean$Perc_human_Short_mean<=samples_df_mean$Perc_human_Short_mean[5] & samples_df_mean$Perc_human_Short_mean>samples_df$Perc_human_Short_mean[3], 3,
ifelse(samples_df_mean$Perc_human_Short_mean>samples_df_mean$Perc_human_Short_mean[5], 4, -9999
))))

samples_df_mean$anthro_group3<-
ifelse(samples_df_mean$Perc_human_Short_mean<=0.25, 1, 
ifelse(samples_df_mean$Perc_human_Short_mean<0.75 & samples_df_mean$Perc_human_Short_mean>0.25, 2, 
ifelse(samples_df_mean$Perc_human_Short_mean>=0.75, 3, -9999
)))

samples_ign_mean$anthro_group3<-
ifelse(samples_ign_mean$Perc_human_Short_mean<=0.25, 1, 
ifelse(samples_ign_mean$Perc_human_Short_mean<0.75 & samples_ign_mean$Perc_human_Short_mean>0.25, 2, 
ifelse(samples_ign_mean$Perc_human_Short_mean>=0.75, 3, -9999
)))


# could add below to fig if want to do standard error rather than sd
	f <- function(z)sd(z)/sqrt(length(z)) # function to calculate std.err
	se <- aggregate(cbind(se.x=log(samples_df_mean[,variable1]),se.y=log(samples_df_mean[,variable2]))~anthro_group3, samples_df_mean,f, na.action=na.omit)
	gg <- merge(gg,se, by="anthro_group3")    # add std.err column
		

make_nich_fig<-function(variable1, variable2, let){
	gg1 <- merge(samples_ign_mean, aggregate(cbind(mean.x=log(samples_ign_mean[,variable1]), mean.y=log(samples_ign_mean[,variable2]))~anthro_group3, samples_ign_mean, mean, na.action=na.omit), by="anthro_group3")
	gg <- merge(gg1, aggregate(cbind(se.x=log(samples_ign_mean[,variable1]), se.y=log(samples_ign_mean[,variable2]))~anthro_group3, samples_ign_mean, sd, na.action=na.omit), by="anthro_group3")
	ggplot(gg, aes(log(gg[,variable1+1]), log(gg[,variable2+1]),color=factor(anthro_group3)))+
	geom_point(alpha=.4, size=1)+
	ggtitle(paste0(letters[let], ". "))+
	labs(x=paste0("log ", names_simple[variable1]), y=paste0("log ", names_simple[variable2]), color="Ignition Source")+ 
	scale_colour_manual(values=(cbPalette[c(2,1)]), labels=c("Primarily Lightning (>75%)", "Primarily Anthropogenic (>75%)")) +
	geom_point(data=gg, alpha = .2, size=1.5, aes(x=mean.x, y=mean.y), inherit.aes = FALSE)+
	geom_errorbar(data=gg, width=0, alpha = .2, aes(x=mean.x, ymin=mean.y-se.y,ymax=mean.y+se.y), inherit.aes = FALSE)+
	geom_errorbarh(data=gg, height=0, alpha = .2,  aes(y=mean.y, xmin=mean.x-se.x,xmax=mean.x+se.x), inherit.aes = FALSE)
}	


samples_ign_mean$Std_JD_Short_mean2<-ifelse(samples_ign_mean$Std_JD_Short_mean==0, NA, samples_ign_mean$Std_JD_Short_mean)
samples_ign_mean$Number_fires_Short_mean2<-ifelse(samples_ign_mean$Number_fires_Short_mean==0, NA, samples_ign_mean$Number_fires_Short_mean)

names(samples_ign_mean)

make_nich_fig2<-function(variable1, variable2, let){
	gg1 <- merge(samples_ign_mean, aggregate(cbind(mean.x=log(samples_ign_mean[,variable1]), mean.y=log(samples_ign_mean[,variable2]))~anthro_group3, samples_ign_mean, mean, na.action=na.omit), by="anthro_group3")
	gg <- merge(gg1, aggregate(cbind(se.x=log(samples_ign_mean[,variable1]), se.y=log(samples_ign_mean[,variable2]))~anthro_group3, samples_ign_mean, sd, na.action=na.omit), by="anthro_group3")
	ggplot(gg, aes(log(gg[,variable1]), log(gg[,variable2]),color=factor(anthro_group3)))+
	geom_point(alpha=.2, size=1)+
	ggtitle(paste0(letters[let], ". "))+
	labs(x=paste0("log ", names_simple[3]), y=paste0("log ", names_simple[14]), color="Ignition Source")+ 
	scale_colour_manual(values=(cbPalette[c(2,1)]), labels=c("Primarily Lightning (>75%)", "Primarily Anthropogenic (>75%)")) +
	geom_point(data=gg, alpha = .2, size=1.5, aes(x=mean.x, y=mean.y), inherit.aes = FALSE)+
	geom_errorbar(data=gg, width=0, alpha = .2, aes(x=mean.x, ymin=mean.y-se.y,ymax=mean.y+se.y), inherit.aes = FALSE)+
	geom_errorbarh(data=gg, height=0, alpha = .2, aes(y=mean.y, xmin=mean.x-se.x,xmax=mean.x+se.x),  inherit.aes = FALSE)
}		


### Figure 2 - a,b 
ggarrange(make_nich_fig(8, 4,1), make_nich_fig2(20, 19,2),
ncol=2, nrow=1, legend=c("right"), common.legend=TRUE)


means_sds <- samples_ign_mean %>%
  group_by(ign) %>%
  summarise(mean_frp = median(log(Mean_FRP_MODIS_mean), na.rm=T),
            sd_frp = sd(log(Mean_FRP_MODIS_mean), na.rm = T),
            mean_area = median(log(Mean_area_Short_mean)),
            sd_area = sd(log(Mean_area_Short_mean)),
            mean_jd = median(log(Std_JD_Short_mean2), na.rm=T),
            sd_jd = sd(log(Std_JD_Short_mean2), na.rm = T),
            mean_n = median(log(Number_fires_Short_mean2), na.rm=T),
            sd_n = sd(log(Number_fires_Short_mean2), na.rm = T)) %>%
  ungroup %>%
  mutate(lowerf = mean_frp - sd_frp,
         upperf = mean_frp + sd_frp,
         lowera = mean_area - sd_area,
         uppera = mean_area + sd_area,
         lowerj = mean_jd - sd_jd,
         upperj = mean_jd + sd_jd,
         lowern = mean_n - sd_n,
         uppern = mean_n + sd_n)

p1 <- ggplot(samples_ign_mean, aes(x=(Mean_area_Short_mean), 
                             y=(Mean_FRP_MODIS_mean),
                             color = ign)) +
  geom_point(alpha = 0.4, size = 1) +
  geom_errorbar(data = means_sds, width=0, #alpha = .2,
                aes(x = exp(mean_area),
                    ymin = exp(mean_frp - sd_frp),
                    ymax = exp(mean_frp + sd_frp)),
                inherit.aes = FALSE) +
  geom_errorbarh(data = means_sds, height=0, #alpha = .2,
                 aes(y = exp(mean_frp),
                    xmin = exp(lowera),
                    xmax = exp(mean_area + sd_area)),
                inherit.aes = FALSE)+
  geom_point(data=means_sds, alpha = .2, size=1.5, aes(x=exp(mean_area), y=exp(mean_frp)), inherit.aes = FALSE) +
   ggtitle("a.")      +
   scale_y_continuous(trans = "log10") +
   scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
                labels = trans_format("log10", math_format(10^.x))) + 
  scale_color_manual(values = c("#E69F00", "#56B4E9"),name = "Ignition Source")+
  ylab("Average Intensity (MW)") +
  xlab("Average Fire Size (ha)") +
  #annotation_logticks()  +
  theme_pubr();p1


p2 <- ggplot(samples_ign_mean, aes(x=Number_fires_Short_mean2, 
                     y=Std_JD_Short_mean2,
                     color = ign)) +
  geom_point(alpha = 0.4, size = 1) +
 
  geom_errorbar(data = means_sds, width=0, #alpha = .2,
                aes(x = exp(mean_n),
                    ymin = exp(mean_jd - sd_jd),
                    ymax = exp(mean_jd + sd_jd)),
                inherit.aes = FALSE) +
  geom_errorbarh(data = means_sds, height=0, #alpha = .2,
                 aes(y = exp(mean_jd),
                     xmin = exp(lowern),
                     xmax = exp(mean_n + sd_n)),
                 inherit.aes = FALSE)+
  ggtitle("b.")              + 
  geom_point(data=means_sds, alpha = .2, size=1.5, aes(x=exp(mean_n), y=exp(mean_jd)), inherit.aes = FALSE) +
  scale_y_continuous(trans = "log10") +
  scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
                labels = trans_format("log10", math_format(10^.x))) +   scale_color_manual(values = c("#E69F00", "#56B4E9"),name = "Ignition Source")+
  xlab("Fire frequency (n fires)") +
  ylab("Season Length (days)") +
  #annotation_logticks()  +
  theme_pubr();p2

ggarrange(p1,p2, ncol=2, nrow=1, legend=c("right"), common.legend=TRUE)



ggarrange(make_nich_fig(2, 1,1), make_nich_fig2(4, 3,2),
ncol=2, nrow=1, legend=c("right"), common.legend=TRUE)

# NO LOG FOR REVIEWER
make_nich_fig_no_log<-function(variable1, variable2){
	gg1 <- merge(samples_ign_mean, aggregate(cbind(mean.x=(samples_ign_mean[,variable1]), mean.y=(samples_ign_mean[,variable2]))~anthro_group3, samples_ign_mean, mean, na.action=na.omit), by="anthro_group3")
	gg <- merge(gg1, aggregate(cbind(se.x=(samples_ign_mean[,variable1]), se.y=(samples_ign_mean[,variable2]))~anthro_group3, samples_ign_mean, sd, na.action=na.omit), by="anthro_group3")
	ggplot(gg, aes((gg[,variable1+1]), (gg[,variable2+1]),color=factor(anthro_group3)))+
	geom_point(alpha=.4, size=1)+
	labs(x=paste0(names_simple[variable1]), y=paste0(names_simple[variable2]), color="Ignition Source")+ 
	scale_colour_manual(values=(cbPalette[c(2,1)]), labels=c("Primarily Lightning (>75%)", "Primarily Anthropogenic (>75%)")) +
	geom_point(data=gg, alpha = .2, size=1.5, aes(x=mean.x, y=mean.y), inherit.aes = FALSE)+
	geom_errorbar(data=gg, width=0, alpha = .2, aes(x=mean.x, ymin=mean.y-se.y,ymax=mean.y+se.y), inherit.aes = FALSE)+
	geom_errorbarh(data=gg, height=0, alpha = .2,  aes(y=mean.y, xmin=mean.x-se.x,xmax=mean.x+se.x), inherit.aes = FALSE)
}	

make_nich_fig2_no_log<-function(variable1, variable2){
	gg1 <- merge(samples_ign_mean, aggregate(cbind(mean.x=log(samples_ign_mean[,variable1]), mean.y=(samples_ign_mean[,variable2]))~anthro_group3, samples_ign_mean, mean, na.action=na.omit), by="anthro_group3")
	gg <- merge(gg1, aggregate(cbind(se.x=(samples_ign_mean[,variable1]), se.y=(samples_ign_mean[,variable2]))~anthro_group3, samples_ign_mean, sd, na.action=na.omit), by="anthro_group3")
	ggplot(gg, aes((gg[,variable1]), (gg[,variable2]),color=factor(anthro_group3)))+
	geom_point(alpha=.2, size=1)+
	labs(x=paste0(names_simple[3]), y=paste0(names_simple[14]), color="Ignition Source")+ 
	scale_colour_manual(values=(cbPalette[c(2,1)]), labels=c("Primarily Lightning (>75%)", "Primarily Anthropogenic (>75%)")) +
	geom_point(data=gg, alpha = .2, size=1.5, aes(x=mean.x, y=mean.y), inherit.aes = FALSE)+
	geom_errorbar(data=gg, width=0, alpha = .2, aes(x=mean.x, ymin=mean.y-se.y,ymax=mean.y+se.y), inherit.aes = FALSE)+
	geom_errorbarh(data=gg, height=0, alpha = .2, aes(y=mean.y, xmin=mean.x-se.x,xmax=mean.x+se.x),  inherit.aes = FALSE)
}		

ggarrange(make_nich_fig_no_log(8, 4), make_nich_fig2_no_log(20, 19),
ncol=2, nrow=1, legend=c("right"), common.legend=TRUE)



# Are anthro fires less intense just be there are more of them over a longer season length when we don't think of fires getting large and hot?
# Another idea that I have for this, is what if, instead of dividing e.g. size/season length, we do a linear model (maybe a mixed model with pixel random effect?) with those two as predictor variables, and then remove the effect of season length, and then plot anthro igntions ~ Event size adjusted for season length? I did the same thing in my ecosphere paper, where I adjusted cheatgrass cover for elevation and it worked out really well. Max showed me how to do it and I have the code easily accessible.

size ~ season length + frequency + anthro ignitions
intensity ~ season length + frequency + anthro ignitions
library(remef)
library(lme4)
install.packages("lme4")
samples_df_mean$Mean_FRP_MODIS_mean.z<-scale(samples_df_mean$Mean_FRP_MODIS_mean)
samples_df_mean$Std_JD_Short_mean.z<-scale(samples_df_mean$Std_JD_Short_mean)
samples_df_mean$Number_fires_Short_mean.z<-scale(samples_df_mean$Number_fires_Short_mean)
samples_df_mean$Perc_human_Short_mean.z<-scale(samples_df_mean$Perc_human_Short_mean)
samples_df_mean$Mean_area_Short_mean.z<-scale(samples_df_mean$Mean_area_Short_mean)
samples_df_mean$anthro_group3<-as.factor(samples_df_mean$anthro_group3)

# model size as a function of season length, frequency, and anthro ign
size1 <- lm(Mean_area_Short_mean.z ~ Std_JD_Short_mean.z + Number_fires_Short_mean.z + Perc_human_Short_mean.z, samples_df_mean)
summary(size1)
# model intensity as a function of season length, frequency, and anthro ign
intensity1 <- lm(Mean_FRP_MODIS_mean.z ~ Std_JD_Short_mean.z + Number_fires_Short_mean.z + Perc_human_Short_mean.z, samples_df_mean)
summary(intensity1)

library(relaimpo)
relImp_size<-calc.relimp(size1, type="lmg", rela=TRUE)
sort(relImp_size$lmg, decreasing=TRUE)
relImp_intensity<-calc.relimp(intensity1, type="lmg", rela=TRUE)
sort(relImp_intensity$lmg, decreasing=TRUE)







